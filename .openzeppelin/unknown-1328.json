{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0xbc771532EEbF1EF6D6351e7E3645676593a912D0",
      "txHash": "0x45bfd193dcab907be5bdc0b13271a3656712f54b91e7d11140687fce66ce0792",
      "kind": "uups"
    },
    {
      "address": "0xe88769da0F027b9d3A0eB25bC6217827781c45f1",
      "txHash": "0x3c789968be10865f86f33f792e002e616bac361432e121d06ed132968ae2527f",
      "kind": "uups"
    }
  ],
  "impls": {
    "5e670fdf2e73db424a1a3f1d93da07ebda9499fa8255228e896a4a13d0fdba7f": {
      "address": "0x72020c52534F00c01Bd182581Bf160d59C142Ea4",
      "txHash": "0xd0e2f139152c8b3ebc0fec789560eefeb4d62e3c1e8fc0338a6bdc2c19cc3f88",
      "layout": {
        "solcVersion": "0.8.26",
        "storage": [
          {
            "label": "DECIMALS",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Pool",
            "src": "contracts/lending/Pool.sol:27"
          },
          {
            "label": "DECIMALS_OFFSET",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Pool",
            "src": "contracts/lending/Pool.sol:28"
          },
          {
            "label": "DECIMALS_MULTIPLIER",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "Pool",
            "src": "contracts/lending/Pool.sol:29"
          },
          {
            "label": "RATE_MULTIPLIER",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256",
            "contract": "Pool",
            "src": "contracts/lending/Pool.sol:30"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IRouter)11340",
            "contract": "Pool",
            "src": "contracts/lending/Pool.sol:31"
          },
          {
            "label": "underlyingAsset",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(ERC20PermitUpgradeable)1416",
            "contract": "Pool",
            "src": "contracts/lending/Pool.sol:32"
          },
          {
            "label": "interestRateModelType",
            "offset": 20,
            "slot": "4",
            "type": "t_enum(InterestRateModelType)11070",
            "contract": "Pool",
            "src": "contracts/lending/Pool.sol:33"
          },
          {
            "label": "reserveRatio",
            "offset": 21,
            "slot": "4",
            "type": "t_uint24",
            "contract": "Pool",
            "src": "contracts/lending/Pool.sol:34"
          },
          {
            "label": "supplyCap",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "Pool",
            "src": "contracts/lending/Pool.sol:35"
          },
          {
            "label": "borrowCap",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "Pool",
            "src": "contracts/lending/Pool.sol:36"
          },
          {
            "label": "borrowedTeaToken",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "Pool",
            "src": "contracts/lending/Pool.sol:37"
          },
          {
            "label": "suppliedConversionRate",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "Pool",
            "src": "contracts/lending/Pool.sol:38"
          },
          {
            "label": "borrowedConversionRate",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256",
            "contract": "Pool",
            "src": "contracts/lending/Pool.sol:39"
          },
          {
            "label": "pendingFee",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256",
            "contract": "Pool",
            "src": "contracts/lending/Pool.sol:40"
          },
          {
            "label": "lastAccumulateTimestamp",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "Pool",
            "src": "contracts/lending/Pool.sol:41"
          },
          {
            "label": "idCounter",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "Pool",
            "src": "contracts/lending/Pool.sol:42"
          },
          {
            "label": "debtInfo",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint256,t_struct(DebtInfo)10828_storage)",
            "contract": "Pool",
            "src": "contracts/lending/Pool.sol:43"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(EIP712Storage)1254_storage": {
            "label": "struct EIP712Upgradeable.EIP712Storage",
            "members": [
              {
                "label": "_hashedName",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_version",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ERC20Storage)234_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)80_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(NoncesStorage)1058_storage": {
            "label": "struct NoncesUpgradeable.NoncesStorage",
            "members": [
              {
                "label": "_nonces",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)13_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)1117_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)1188_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_contract(ERC20PermitUpgradeable)1416": {
            "label": "contract ERC20PermitUpgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)11340": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_enum(InterestRateModelType)11070": {
            "label": "enum IRouter.InterestRateModelType",
            "members": [
              "Null",
              "Static",
              "Variable",
              "End"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint256,t_struct(DebtInfo)10828_storage)": {
            "label": "mapping(uint256 => struct IPool.DebtInfo)",
            "numberOfBytes": "32"
          },
          "t_struct(DebtInfo)10828_storage": {
            "label": "struct IPool.DebtInfo",
            "members": [
              {
                "label": "isClosed",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "borrowedTeaToken",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Nonces": [
            {
              "contract": "NoncesUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:17",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.EIP712": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_hashedName",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_hashedVersion",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_version",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "ad54813f44b90ba2a4cb149e093ac20a5212f0af4c4b7f1a5335caf7617814c9": {
      "address": "0x62006963759e45A7a40398F34B97077115345C90",
      "txHash": "0xf9a7d804e1ff55aa767da9af927271196854c1c7869710d9939cd1d04146f236",
      "layout": {
        "solcVersion": "0.8.26",
        "storage": [
          {
            "label": "poolBeacon",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "Router",
            "src": "contracts/lending/Router.sol:24"
          },
          {
            "label": "tradingCore",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "Router",
            "src": "contracts/lending/Router.sol:25"
          },
          {
            "label": "lendingPoolImplementation",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "Router",
            "src": "contracts/lending/Router.sol:26"
          },
          {
            "label": "FEE_CAP",
            "offset": 20,
            "slot": "2",
            "type": "t_uint32",
            "contract": "Router",
            "src": "contracts/lending/Router.sol:27"
          },
          {
            "label": "feeConfig",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(FeeConfig)11076_storage",
            "contract": "Router",
            "src": "contracts/lending/Router.sol:28"
          },
          {
            "label": "enableWhitelist",
            "offset": 0,
            "slot": "4",
            "type": "t_bool",
            "contract": "Router",
            "src": "contracts/lending/Router.sol:29"
          },
          {
            "label": "pool",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_contract(ERC20PermitUpgradeable)1416,t_mapping(t_enum(InterestRateModelType)11070,t_contract(Pool)14060))",
            "contract": "Router",
            "src": "contracts/lending/Router.sol:31"
          },
          {
            "label": "interestRateModel",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_enum(InterestRateModelType)11070,t_address)",
            "contract": "Router",
            "src": "contracts/lending/Router.sol:32"
          },
          {
            "label": "isAssetEnabled",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_contract(ERC20PermitUpgradeable)1416,t_bool)",
            "contract": "Router",
            "src": "contracts/lending/Router.sol:33"
          },
          {
            "label": "whitelistedOperator",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "Router",
            "src": "contracts/lending/Router.sol:34"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_struct(InitializableStorage)80_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)13_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)1117_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)1188_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_contract(ERC20PermitUpgradeable)1416": {
            "label": "contract ERC20PermitUpgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(Pool)14060": {
            "label": "contract Pool",
            "numberOfBytes": "20"
          },
          "t_enum(InterestRateModelType)11070": {
            "label": "enum IRouter.InterestRateModelType",
            "members": [
              "Null",
              "Static",
              "Variable",
              "End"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_contract(ERC20PermitUpgradeable)1416,t_bool)": {
            "label": "mapping(contract ERC20PermitUpgradeable => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_contract(ERC20PermitUpgradeable)1416,t_mapping(t_enum(InterestRateModelType)11070,t_contract(Pool)14060))": {
            "label": "mapping(contract ERC20PermitUpgradeable => mapping(enum IRouter.InterestRateModelType => contract Pool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_enum(InterestRateModelType)11070,t_address)": {
            "label": "mapping(enum IRouter.InterestRateModelType => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_enum(InterestRateModelType)11070,t_contract(Pool)14060)": {
            "label": "mapping(enum IRouter.InterestRateModelType => contract Pool)",
            "numberOfBytes": "32"
          },
          "t_struct(FeeConfig)11076_storage": {
            "label": "struct IRouter.FeeConfig",
            "members": [
              {
                "label": "treasury",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "borrowFee",
                "type": "t_uint32",
                "offset": 20,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "c2de9082ca1a30ea6596b89b7d4fab60f180494aa7a98cb6c2fda7dbf4b115c0": {
      "address": "0xf227Cc0DD2732052974EfD050E4c28C0Cc93BB12",
      "txHash": "0xee4fb780d29bbc9988e222a78744564ab6c9bc9af1175a711de58fc77fed76e9",
      "layout": {
        "solcVersion": "0.8.26",
        "storage": [
          {
            "label": "tradingCore",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ITradingCore)12201",
            "contract": "MarketNFT",
            "src": "contracts/trading/MarketNFT.sol:27"
          },
          {
            "label": "oracle",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IAssetOracle)11373",
            "contract": "MarketNFT",
            "src": "contracts/trading/MarketNFT.sol:28"
          },
          {
            "label": "token0",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "MarketNFT",
            "src": "contracts/trading/MarketNFT.sol:29"
          },
          {
            "label": "token1",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "MarketNFT",
            "src": "contracts/trading/MarketNFT.sol:30"
          },
          {
            "label": "isToken0Margin",
            "offset": 20,
            "slot": "3",
            "type": "t_bool",
            "contract": "MarketNFT",
            "src": "contracts/trading/MarketNFT.sol:31"
          },
          {
            "label": "maxLeverage",
            "offset": 21,
            "slot": "3",
            "type": "t_uint24",
            "contract": "MarketNFT",
            "src": "contracts/trading/MarketNFT.sol:32"
          },
          {
            "label": "openPositionLossRatioThreshold",
            "offset": 24,
            "slot": "3",
            "type": "t_uint24",
            "contract": "MarketNFT",
            "src": "contracts/trading/MarketNFT.sol:33"
          },
          {
            "label": "liquidateLossRatioThreshold",
            "offset": 27,
            "slot": "3",
            "type": "t_uint24",
            "contract": "MarketNFT",
            "src": "contracts/trading/MarketNFT.sol:34"
          },
          {
            "label": "liquidationDiscount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint24",
            "contract": "MarketNFT",
            "src": "contracts/trading/MarketNFT.sol:35"
          },
          {
            "label": "token0PositionSizeCap",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "MarketNFT",
            "src": "contracts/trading/MarketNFT.sol:36"
          },
          {
            "label": "token1PositionSizeCap",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "MarketNFT",
            "src": "contracts/trading/MarketNFT.sol:37"
          },
          {
            "label": "totalToken0PositionAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "MarketNFT",
            "src": "contracts/trading/MarketNFT.sol:38"
          },
          {
            "label": "totalToken1PositionAmount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "MarketNFT",
            "src": "contracts/trading/MarketNFT.sol:39"
          },
          {
            "label": "positions",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_struct(Position)11482_storage)",
            "contract": "MarketNFT",
            "src": "contracts/trading/MarketNFT.sol:41"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(ERC721EnumerableStorage)901_storage": {
            "label": "struct ERC721EnumerableUpgradeable.ERC721EnumerableStorage",
            "members": [
              {
                "label": "_ownedTokens",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_ownedTokensIndex",
                "type": "t_mapping(t_uint256,t_uint256)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_allTokens",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_allTokensIndex",
                "type": "t_mapping(t_uint256,t_uint256)",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ERC721Storage)544_storage": {
            "label": "struct ERC721Upgradeable.ERC721Storage",
            "members": [
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "offset": 0,
                "slot": "5"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_struct(InitializableStorage)80_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)13_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)1117_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)1188_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_contract(IAssetOracle)11373": {
            "label": "contract IAssetOracle",
            "numberOfBytes": "20"
          },
          "t_contract(ITradingCore)12201": {
            "label": "contract ITradingCore",
            "numberOfBytes": "20"
          },
          "t_enum(InterestRateModelType)11070": {
            "label": "enum IRouter.InterestRateModelType",
            "members": [
              "Null",
              "Static",
              "Variable",
              "End"
            ],
            "numberOfBytes": "1"
          },
          "t_enum(PositionStatus)11448": {
            "label": "enum IMarketNFT.PositionStatus",
            "members": [
              "Inactive",
              "Open",
              "Closed"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint256,t_struct(Position)11482_storage)": {
            "label": "mapping(uint256 => struct IMarketNFT.Position)",
            "numberOfBytes": "32"
          },
          "t_struct(Position)11482_storage": {
            "label": "struct IMarketNFT.Position",
            "members": [
              {
                "label": "status",
                "type": "t_enum(PositionStatus)11448",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "isLongToken0",
                "type": "t_bool",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "isMarginAsset",
                "type": "t_bool",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "stopLossRateTolerance",
                "type": "t_uint24",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "initialLeverage",
                "type": "t_uint24",
                "offset": 6,
                "slot": "0"
              },
              {
                "label": "marginAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "interestRateModelType",
                "type": "t_enum(InterestRateModelType)11070",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "borrowId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "assetAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "swappableAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "takeProfit",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "stopLoss",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "256"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721Enumerable": [
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25",
              "offset": 0,
              "slot": "3"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721": [
            {
              "contract": "ERC721Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
              "offset": 0,
              "slot": "4"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
              "offset": 0,
              "slot": "5"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "85dd1fbcdea10b0eed64a69160c30efb8a8951be2a8cf389fc741f12cf19110d": {
      "address": "0x2ca0BDB573E8fA13852eC076f09435e82338779A",
      "txHash": "0x7ce2e6bc410fc59e683545c5734f1adff657b01e37044916856b441eafc93e43",
      "layout": {
        "solcVersion": "0.8.26",
        "storage": [
          {
            "label": "FEE_CAP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32",
            "contract": "TradingCore",
            "src": "contracts/trading/TradingCore.sol:39"
          },
          {
            "label": "marketBeacon",
            "offset": 4,
            "slot": "0",
            "type": "t_address",
            "contract": "TradingCore",
            "src": "contracts/trading/TradingCore.sol:41"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IRouter)10008",
            "contract": "TradingCore",
            "src": "contracts/trading/TradingCore.sol:42"
          },
          {
            "label": "feeConfig",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(FeeConfig)10529_storage",
            "contract": "TradingCore",
            "src": "contracts/trading/TradingCore.sol:43"
          },
          {
            "label": "feePlugin",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IFeePlugin)10071",
            "contract": "TradingCore",
            "src": "contracts/trading/TradingCore.sol:44"
          },
          {
            "label": "swapRelayer",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(SwapRelayer)15689",
            "contract": "TradingCore",
            "src": "contracts/trading/TradingCore.sol:45"
          },
          {
            "label": "enableWhitelist",
            "offset": 20,
            "slot": "4",
            "type": "t_bool",
            "contract": "TradingCore",
            "src": "contracts/trading/TradingCore.sol:46"
          },
          {
            "label": "pairMarket",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_contract(ERC20PermitUpgradeable)1416,t_mapping(t_contract(ERC20PermitUpgradeable)1416,t_contract(MarketNFT)15491))",
            "contract": "TradingCore",
            "src": "contracts/trading/TradingCore.sol:48"
          },
          {
            "label": "whitelistedOperator",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "TradingCore",
            "src": "contracts/trading/TradingCore.sol:49"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_struct(InitializableStorage)80_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)13_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)1117_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)1188_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_contract(ERC20PermitUpgradeable)1416": {
            "label": "contract ERC20PermitUpgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(IFeePlugin)10071": {
            "label": "contract IFeePlugin",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)10008": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_contract(MarketNFT)15491": {
            "label": "contract MarketNFT",
            "numberOfBytes": "20"
          },
          "t_contract(SwapRelayer)15689": {
            "label": "contract SwapRelayer",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_contract(ERC20PermitUpgradeable)1416,t_contract(MarketNFT)15491)": {
            "label": "mapping(contract ERC20PermitUpgradeable => contract MarketNFT)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_contract(ERC20PermitUpgradeable)1416,t_mapping(t_contract(ERC20PermitUpgradeable)1416,t_contract(MarketNFT)15491))": {
            "label": "mapping(contract ERC20PermitUpgradeable => mapping(contract ERC20PermitUpgradeable => contract MarketNFT))",
            "numberOfBytes": "32"
          },
          "t_struct(FeeConfig)10529_storage": {
            "label": "struct ITradingCore.FeeConfig",
            "members": [
              {
                "label": "treasury",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tradingFee",
                "type": "t_uint32",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "liquidationFee",
                "type": "t_uint32",
                "offset": 24,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "c65fd157f6fb8fa31a31950b87582b89d35872d4e40da12be7ce5e279b6e4ada": {
      "address": "0xfa537656E9089eA9a79ceA975319196Ca53269eb",
      "txHash": "0x0d6bf5b08327593c3e43af7898d649504eb6819e7c26b2892fa660109a74a3bc",
      "layout": {
        "solcVersion": "0.8.26",
        "storage": [
          {
            "label": "FEE_CAP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32",
            "contract": "TradingCore",
            "src": "contracts/trading/TradingCore.sol:39"
          },
          {
            "label": "marketBeacon",
            "offset": 4,
            "slot": "0",
            "type": "t_address",
            "contract": "TradingCore",
            "src": "contracts/trading/TradingCore.sol:41"
          },
          {
            "label": "router",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IRouter)10008",
            "contract": "TradingCore",
            "src": "contracts/trading/TradingCore.sol:42"
          },
          {
            "label": "feeConfig",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(FeeConfig)10542_storage",
            "contract": "TradingCore",
            "src": "contracts/trading/TradingCore.sol:43"
          },
          {
            "label": "feePlugin",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IFeePlugin)10071",
            "contract": "TradingCore",
            "src": "contracts/trading/TradingCore.sol:44"
          },
          {
            "label": "swapRelayer",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(SwapRelayer)15702",
            "contract": "TradingCore",
            "src": "contracts/trading/TradingCore.sol:45"
          },
          {
            "label": "enableWhitelist",
            "offset": 20,
            "slot": "4",
            "type": "t_bool",
            "contract": "TradingCore",
            "src": "contracts/trading/TradingCore.sol:46"
          },
          {
            "label": "pairMarket",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_contract(ERC20PermitUpgradeable)1416,t_mapping(t_contract(ERC20PermitUpgradeable)1416,t_contract(MarketNFT)15504))",
            "contract": "TradingCore",
            "src": "contracts/trading/TradingCore.sol:48"
          },
          {
            "label": "whitelistedOperator",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "TradingCore",
            "src": "contracts/trading/TradingCore.sol:49"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_struct(InitializableStorage)80_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)13_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)1117_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)1188_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_contract(ERC20PermitUpgradeable)1416": {
            "label": "contract ERC20PermitUpgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(IFeePlugin)10071": {
            "label": "contract IFeePlugin",
            "numberOfBytes": "20"
          },
          "t_contract(IRouter)10008": {
            "label": "contract IRouter",
            "numberOfBytes": "20"
          },
          "t_contract(MarketNFT)15504": {
            "label": "contract MarketNFT",
            "numberOfBytes": "20"
          },
          "t_contract(SwapRelayer)15702": {
            "label": "contract SwapRelayer",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_contract(ERC20PermitUpgradeable)1416,t_contract(MarketNFT)15504)": {
            "label": "mapping(contract ERC20PermitUpgradeable => contract MarketNFT)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_contract(ERC20PermitUpgradeable)1416,t_mapping(t_contract(ERC20PermitUpgradeable)1416,t_contract(MarketNFT)15504))": {
            "label": "mapping(contract ERC20PermitUpgradeable => mapping(contract ERC20PermitUpgradeable => contract MarketNFT))",
            "numberOfBytes": "32"
          },
          "t_struct(FeeConfig)10542_storage": {
            "label": "struct ITradingCore.FeeConfig",
            "members": [
              {
                "label": "treasury",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tradingFee",
                "type": "t_uint32",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "liquidationFee",
                "type": "t_uint32",
                "offset": 24,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    }
  }
}
